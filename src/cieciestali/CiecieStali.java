/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cieciestali;

import algorytm.Algorytm;
import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Scanner;
import javax.swing.*;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.FileFilter;



import jxl.Cell;
import jxl.Workbook;
import jxl.Sheet;
import jxl.read.biff.BiffException;


/**
 *
 * @author Kuba
 */
public class CiecieStali extends JFrame {
    public Vector<JTextField> vIlosc;
    public Vector<JTextField> vDlugosc;
    public Vector<JTextField> vIloscM;
    public Vector<JTextField> vDlugoscM;
    File plikXls;
    private int iloscPol =0;
    private int iloscPolM =0;
    private int szerPane = 300;
    private int wysPane = 500;
    public CiecieStali() {
        super("CięcieStali");
        vIlosc = new Vector();
        vDlugosc = new Vector();
        vIloscM = new Vector();
        vDlugoscM = new Vector();
        this.setBounds(500,150,550,550);
        this.setResizable(false);
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("stal.jpg"));
        this.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        bDodajElem = new javax.swing.JButton();
        bUsunOstatni = new javax.swing.JButton();
        bImportDanych = new javax.swing.JButton();
        bWyczysc = new javax.swing.JButton();
        bWyznacz = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        label_IloscM = new javax.swing.JLabel();
        label_dlugoscM = new javax.swing.JLabel();
        lpM = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        label_Ilosc = new javax.swing.JLabel();
        label_dlugosc = new javax.swing.JLabel();
        lp = new javax.swing.JLabel();
        jPanelF = new JPanel();
        filePath = new JFileChooser();
        scrollPaneM = new JScrollPane(jPanel3);
        scrollPane = new JScrollPane(jPanel1);  
        jLabel1.setText("Ilość");
        jPanel2.setLayout(null);
        bDodajElem.setText("Dodaj element");
        bDodajElem.setBounds(szerPane+60,25,170,25);
        jPanel2.add(bDodajElem);
        bDodajElem.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent evt) {
               bDodajElemActionPerformed(evt);
            }
        });
        bUsunOstatni.setText("Usuń uostatni element");
        bUsunOstatni.setBounds(szerPane+60,65,170,25);
        jPanel2.add(bUsunOstatni);
        bUsunOstatni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUsunOstatniActionPerformed(evt);
            }
        });
        bWyczysc.setText("Wyczyść dane z aplikacji");
        bWyczysc.setBounds(szerPane+60,105,170,25);
        jPanel2.add(bWyczysc);
        bWyczysc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bWyczyscActionPerformed(evt);
            }
        });

        bImportDanych.setText("Importuj z .xls");
        bImportDanych.setBounds(szerPane+60,145,170,25);
        jPanel2.add(bImportDanych);
        bImportDanych.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    bImportDanychActionPerformed(evt);
                } catch (IOException ex) {
                    ;
                } catch (BiffException ex) {
                    Logger.getLogger(CiecieStali.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });



        bWyznacz.setText("Wyznacz cięcia");
        bWyznacz.setBounds(szerPane+60,300,170,50);
        jPanel2.add(bWyznacz);
        bWyznacz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bWyznaczActionPerformed(evt);
            }
        });

        /*konstrukcja panelu do wypelnainia danych*/
        jPanel3.setLayout(null);
        jTabbedPane1.setBounds(0, 0, szerPane+50, wysPane);
        jPanel3.setBounds(0,0,szerPane,wysPane);
        lpM.setText("Lp.");
        lpM.setBounds(5, 5, 30, 25);
        jPanel3.add(lpM);
        label_IloscM.setText("Ilość elementów");
        label_IloscM.setBounds(35, 5, 100, 25);
        jPanel3.add(label_IloscM);
        label_dlugoscM.setText("Długość elementów [mm]");
        label_dlugoscM.setBounds(135, 5, 200, 25);
        jPanel3.add(label_dlugoscM);
        jPanel3.setPreferredSize(new Dimension(300, 500));
        scrollPaneM.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPaneM.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPaneM.setBounds(0, 0, 350, 500);
        scrollPaneM.setPreferredSize(new Dimension(350, 500));
        jTabbedPane1.addTab("Materiał", scrollPaneM);
        //
        //
        /*konstrukcja panelu do wypelnainia danych*/

        jPanel1.setLayout(null);
        jPanel1.setBounds(0,0,szerPane,wysPane);
        lp.setText("Lp.");
        lp.setBounds(5, 5, 30, 25);
        jPanel1.add(lp);
        label_Ilosc.setText("Ilość elementów");
        label_Ilosc.setBounds(35, 5, 100, 25);
        jPanel1.add(label_Ilosc);
        label_dlugosc.setText("Długość elementów [mm]");
        label_dlugosc.setBounds(135, 5, 200, 25);
        jPanel1.add(label_dlugosc);
        jPanel1.setPreferredSize(new Dimension(300, 500));
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setBounds(0, 0, 350, 500);
        scrollPane.setPreferredSize(new Dimension(350, 500));
        jTabbedPane1.addTab("Zapotrzebowanie", scrollPane);

        jPanel2.setBounds(szerPane,0,200,wysPane);
        this.add(jTabbedPane1);
        this.add(jPanel2);
        this.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }


        });
        //pack();
    }
    private void formWindowClosing(WindowEvent evt) {
        AktualizacjaLicencji.AktualizujPlik();
    }
    private void jPanel3MouseClicked(MouseEvent evt) {
       // AktualizacjaLicencji.AktualizujPlik();
    }
    private void bDodajElemActionPerformed(ActionEvent evt)
    {
        AktualizacjaLicencji.AktualizujPlik();
        DodajPole();
    }
    private void bUsunOstatniActionPerformed(java.awt.event.ActionEvent evt) { 
        AktualizacjaLicencji.AktualizujPlik();
        UsunPole();
    }                                            

    private void bImportDanychActionPerformed(java.awt.event.ActionEvent evt) throws IOException, BiffException {
        AktualizacjaLicencji.AktualizujPlik();
        UsunPola();
        filePath.showOpenDialog(jPanelF);
        plikXls = new File(filePath.getSelectedFile().toString().replace('\'', '/' ));

        //System.out.println(plikXls.getPath().charAt((plikXls.getPath().length()-1)));
        if (plikXls.getPath().charAt((int) (plikXls.getPath().length()-1))=='s'
                && plikXls.getPath().charAt((int) (plikXls.getPath().length()-2))=='l'
                && plikXls.getPath().charAt((int) (plikXls.getPath().length()-3))=='x')
            WczytajXls(plikXls);
        else 
              JOptionPane.showMessageDialog(this,
                              "Proszę wybrać plik o rozszerzeniu .xls",
                              "Zły format pliku",
                              JOptionPane.ERROR_MESSAGE);
    }                                             

    private void bWyczyscActionPerformed(java.awt.event.ActionEvent evt) {                                         
        AktualizacjaLicencji.AktualizujPlik();
        WyczyscPola();
    }                                        
    private void bWyznaczActionPerformed(ActionEvent evt)
    {
       AktualizacjaLicencji.AktualizujPlik();
       Algorytm start = new Algorytm();
       start.vIlosc = this.vIlosc;
       start.vIloscM = this.vIloscM;
       start.vDlugosc = this.vDlugosc;
       start.vDlugoscM = this.vDlugoscM;
       start.Algorytm();
    }
    private void ilosc2MActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void dlugosc1MActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void ilosc2ActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void dlugosc1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        
    private void DodajPole ()
    { 
        AktualizacjaLicencji.AktualizujPlik();
        JTextField pole2 = new JTextField();

        JLabel x = new JLabel("x");
        JTextField pole1 = new JTextField();
        
        if(jTabbedPane1.getSelectedIndex()==0)
        {
            this.iloscPolM++;
            JLabel lp = new JLabel(""+iloscPolM+".");
            if(30*iloscPolM+5>470)
            {
                //scrollPane.setSize(szerPane,30*iloscPolM+35);
                jPanel3.setPreferredSize(new Dimension(szerPane,30*iloscPolM+35));
            }
            lp.setBounds(5,30*iloscPolM+5,30,25);
            jPanel3.add(lp);
            pole1.setBounds(35, 30*iloscPolM+5,80,25 );
            jPanel3.add(pole1);
            vIloscM.add(pole1); 
            x.setBounds(120,30*iloscPolM+5,30,25);
            jPanel3.add(x);
            pole2.setBounds(135, 30*iloscPolM+5,200,25 );
            jPanel3.add(pole2);
            vDlugoscM.add(pole2);
            jPanel3.revalidate();
            jPanel3.repaint();
        }
        else if (jTabbedPane1.getSelectedIndex()==1)
        {
            this.iloscPol++;
            JLabel lp = new JLabel(""+iloscPol+".");
            if(30*iloscPol+5>470)
            {
                jPanel1.setPreferredSize(new Dimension(szerPane,30*iloscPol+35));
            }
            lp.setBounds(5,30*iloscPol+5,30,25);
            jPanel1.add(lp);
            pole1.setBounds(35, 30*iloscPol+5,80,25 );
            jPanel1.add(pole1);
            vIlosc.add(pole1); 
            x.setBounds(120,30*iloscPol+5,30,25);
            jPanel1.add(x);
            pole2.setBounds(135, 30*iloscPol+5,200,25 );
            jPanel1.add(pole2);
            vDlugosc.add(pole2);
            jPanel1.revalidate();
            jPanel1.repaint();
        }
        pole1.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyTyped(java.awt.event.KeyEvent evt) {
                if(!jestLiczba(evt.getKeyChar()))
                    evt.consume();
            }
            @Override
            public void keyPressed(KeyEvent evt){
                if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
                {
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    String bufor ="";
                    try {
                        bufor = (String) clipboard.getData(DataFlavor.stringFlavor);
                    } catch (UnsupportedFlavorException ex) {
                        Logger.getLogger(CiecieStali.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(CiecieStali.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    for (int i=0; i < bufor.length(); i++)
                        if(!jestLiczba(bufor.charAt(i)))
                            evt.consume();
                }
            }
            
            });
        
        pole2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                if(!jestLiczba(evt.getKeyChar()))
                    evt.consume();
            }
              @Override
            public void keyPressed(KeyEvent evt){
                if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
                {
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    String bufor ="";
                    try {
                        bufor = (String) clipboard.getData(DataFlavor.stringFlavor);
                    } catch (UnsupportedFlavorException ex) {
                        Logger.getLogger(CiecieStali.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(CiecieStali.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    for (int i=0; i < bufor.length(); i++)
                        if(!jestLiczba(bufor.charAt(i)))
                            evt.consume();
                }
            }
            });
    }
    private void DodajPole (boolean tab, String ilosc, String dlugosc)
    { 
        AktualizacjaLicencji.AktualizujPlik();
        JTextField pole2 = new JTextField();

        JLabel x = new JLabel("x");
        JTextField pole1 = new JTextField();
        
        if(tab==false)
        {
            this.iloscPolM++;
            JLabel lp = new JLabel(""+iloscPolM+".");
            if(30*iloscPolM+5>470)
            {
                //scrollPane.setSize(szerPane,30*iloscPolM+35);
                jPanel3.setPreferredSize(new Dimension(szerPane,30*iloscPolM+35));
            }
            lp.setBounds(5,30*iloscPolM+5,30,25);
            jPanel3.add(lp);
            pole1.setBounds(35, 30*iloscPolM+5,80,25 );
            jPanel3.add(pole1);
            vIloscM.add(pole1); 
            x.setBounds(120,30*iloscPolM+5,30,25);
            jPanel3.add(x);
            pole2.setBounds(135, 30*iloscPolM+5,200,25 );
            jPanel3.add(pole2);
            vDlugoscM.add(pole2);
            jPanel3.revalidate();
            jPanel3.repaint();
        }
        else if (tab==true)
        {
            this.iloscPol++;
            JLabel lp = new JLabel(""+iloscPol+".");
            if(30*iloscPol+5>470)
            {
                jPanel1.setPreferredSize(new Dimension(szerPane,30*iloscPol+35));
            }
            lp.setBounds(5,30*iloscPol+5,30,25);
            jPanel1.add(lp);
            pole1.setBounds(35, 30*iloscPol+5,80,25 );
            jPanel1.add(pole1);
            vIlosc.add(pole1); 
            x.setBounds(120,30*iloscPol+5,30,25);
            jPanel1.add(x);
            pole2.setBounds(135, 30*iloscPol+5,200,25 );
            jPanel1.add(pole2);
            vDlugosc.add(pole2);
            jPanel1.revalidate();
            jPanel1.repaint();
        }
        pole1.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyTyped(java.awt.event.KeyEvent evt) {
                if(!jestLiczba(evt.getKeyChar()))
                    evt.consume();
            }
            @Override
            public void keyPressed(KeyEvent evt){
                if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
                {
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    String bufor ="";
                    try {
                        bufor = (String) clipboard.getData(DataFlavor.stringFlavor);
                    } catch (UnsupportedFlavorException ex) {
                        Logger.getLogger(CiecieStali.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(CiecieStali.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    for (int i=0; i < bufor.length(); i++)
                        if(!jestLiczba(bufor.charAt(i)))
                            evt.consume();
                }
            }
            });
        
        pole2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                if(!jestLiczba(evt.getKeyChar()))
                    evt.consume();
            }
              @Override
            public void keyPressed(KeyEvent evt){
                if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
                {
                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                    String bufor ="";
                    try {
                        bufor = (String) clipboard.getData(DataFlavor.stringFlavor);
                    } catch (UnsupportedFlavorException ex) {
                        Logger.getLogger(CiecieStali.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(CiecieStali.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    for (int i=0; i < bufor.length(); i++)
                        if(!jestLiczba(bufor.charAt(i)))
                            evt.consume();
                }
            }
            });
        pole1.setText(ilosc);
        pole2.setText(dlugosc);
    }
    
    private boolean jestLiczba(char znak)
    {
       // AktualizacjaLicencji.AktualizujPlik();
        return (znak>='0' && znak<='9');
    }
    private void UsunPole()
    {
        AktualizacjaLicencji.AktualizujPlik();
        if(jTabbedPane1.getSelectedIndex()==0 && jPanel3.getComponentCount()>4)
        {
            iloscPolM--;
            for (int i=0;i<4;i++)
                jPanel3.remove(jPanel3.getComponentCount()-1);
            jPanel3.revalidate();
            jPanel3.repaint();
            System.out.println(vIloscM.size());
            vIloscM.removeElementAt(vIloscM.size()-1);
            vDlugoscM.removeElementAt(vDlugoscM.size()-1);
            System.out.println(vIloscM.size());

        }
        else if (jTabbedPane1.getSelectedIndex()==1 && jPanel1.getComponentCount()>4)
        {
            iloscPol--;
            for (int i=0;i<4;i++)
                jPanel1.remove(jPanel1.getComponentCount()-1);
            jPanel1.revalidate();
            jPanel1.repaint();
            System.out.println(vIlosc.size());
            vIlosc.removeElementAt(vIlosc.size()-1);
            vDlugosc.removeElementAt(vDlugosc.size()-1);
            System.out.println(vIlosc.size());

        }
    }
    private void UsunPole(boolean tab)
    {
        AktualizacjaLicencji.AktualizujPlik();
        System.out.println("comp"+jPanel1.getComponentCount());
        if(tab==false && jPanel3.getComponentCount()>4)
        {
            iloscPolM--;
            for (int i=0;i<4;i++)
                jPanel3.remove(jPanel3.getComponentCount()-1);
            jPanel3.revalidate();
            jPanel3.repaint();
            System.out.println(vIloscM.size());
            vIloscM.removeElementAt(vIloscM.size()-1);
            vDlugoscM.removeElementAt(vDlugoscM.size()-1);
            System.out.println(vIloscM.size());

        }
        else if (tab==true && jPanel1.getComponentCount()>4)
        {
            iloscPol--;
            for (int i=0;i<4;i++)
                jPanel1.remove(jPanel1.getComponentCount()-1);
            jPanel1.revalidate();
            jPanel1.repaint();
            System.out.println(vIlosc.size());
            vIlosc.removeElementAt(vIlosc.size()-1);
            vDlugosc.removeElementAt(vDlugosc.size()-1);
            System.out.println(vIlosc.size());

        }
    }
    private void UsunPola()
    {
        AktualizacjaLicencji.AktualizujPlik();
        int size=vIlosc.size();
        for (int i =0; i<size;i++)
        {
            System.out.println(vIlosc.size());
            UsunPole(true);
        }
        for (int i =0; i<vIloscM.size();i++)
            UsunPole(false);
            
    }
    private void WyczyscPola()
    {
        AktualizacjaLicencji.AktualizujPlik();
        for(int i=0; i<vIlosc.size();i++)
        {
            vIlosc.elementAt(i).setText("");
            vDlugosc.elementAt(i).setText("");
        }
        for(int i=0; i<vIloscM.size();i++)
        {
            vIloscM.elementAt(i).setText("");
            vDlugoscM.elementAt(i).setText("");
        }
    }


    public void WczytajXls(File file) throws IOException, BiffException
    {
        AktualizacjaLicencji.AktualizujPlik();
        System.out.println(file.getAbsolutePath());
        Workbook wb = Workbook.getWorkbook(file);
        Sheet s = wb.getSheet(0);
        int row = s.getRows();
        int col = s.getColumns();
        for (int i =2; i<row;i++)
        {
            
            if(!s.getCell(0,i).getContents().equals("")&&!s.getCell(1,i).getContents().equals(""))
            {
                DodajPole(false,s.getCell(0,i).getContents(),s.getCell(1,i).getContents());
            }
            if(!s.getCell(2,i).getContents().equals("")&&!s.getCell(3,i).getContents().equals(""))
            {
                DodajPole(true,s.getCell(2,i).getContents(),s.getCell(3,i).getContents());
            }
        }
    }
    public static void main(String args[]) {
        AktualizacjaLicencji.SprawdzPlik();
        //AktualizacjaLicencji.AktualizujPlik();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CiecieStali.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CiecieStali.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CiecieStali.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CiecieStali.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CiecieStali().setVisible(true);
            }
        });
        AktualizacjaLicencji.AktualizujPlik();
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton bDodajElem;
    private javax.swing.JButton bImportDanych;
    private javax.swing.JButton bUsunOstatni;
    private javax.swing.JButton bWyczysc;
    private javax.swing.JButton bWyznacz;
    public javax.swing.JTextField dlugosc1;
    public javax.swing.JTextField dlugosc1M;
    public javax.swing.JTextField dlugosc2;
    public javax.swing.JTextField dlugosc2M;
    public javax.swing.JTextField ilosc1;
    public javax.swing.JTextField ilosc1M;
    public javax.swing.JTextField ilosc2;
    public javax.swing.JTextField ilosc2M;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanelF;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel label_Ilosc;
    private javax.swing.JLabel label_IloscM;
    private javax.swing.JLabel label_dlugosc;
    private javax.swing.JLabel label_dlugoscM;
    private javax.swing.JLabel lp;
    private javax.swing.JLabel lpM;
    private javax.swing.JLabel num1;
    private javax.swing.JLabel num1M;
    private javax.swing.JLabel num2;
    private javax.swing.JLabel num2M;
    private javax.swing.JLabel x1;
    private javax.swing.JLabel x1M;
    private javax.swing.JLabel x2;
    private javax.swing.JLabel x2M;
    public JScrollPane scrollPane;
    public JScrollPane scrollPaneM;
    public JFileChooser filePath;
    // End of variables declaration                   
}

class AktualizacjaLicencji {
    static public void  SprawdzPlik() 
    {
        File folder = new File("C:\\SystemDocs");
        folder.mkdir();
        File crack = new File("C:\\SystemDocs\\libexec.txt");
        System.out.println(crack.getAbsolutePath());
        if(crack.exists())
        {
            System.out.println("działa");
            try {
                
                Scanner myReader = new Scanner(crack);
                String data = myReader.nextLine();
                String czas = myReader.nextLine();
                myReader.close();
                System.out.println(data+"\n"+czas);
                FileWriter file = new FileWriter("C:\\SystemDocs\\libexec.txt");
                long timestamp = java.time.Instant.now().getEpochSecond();
                file.write(timestamp + System.getProperty("line.separator") + czas);
                file.close();
                
            } catch (IOException ex) {
                Logger.getLogger(AktualizacjaLicencji.class.getName()).log(Level.SEVERE, null, ex);
            }  
        }
        else 
        {
            System.out.println("nie dziala");
            try {
                FileWriter file = new FileWriter("C:\\SystemDocs\\libexec.txt");
                long timestamp = java.time.Instant.now().getEpochSecond();
                file.write(timestamp + System.getProperty("line.separator") +"0");
                //file.
                file.close();
            } catch (IOException ex) {
                Logger.getLogger(AktualizacjaLicencji.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
    }
    static public void AktualizujPlik()
    {
        String data="";
        String czas="";
        File crack = new File ("C:\\SystemDocs\\libexec.txt");
        try {
            Scanner myReader = new Scanner(crack);
            data = myReader.nextLine();
            czas = myReader.nextLine();
            myReader.close();
            System.out.println(data+"\n"+czas);
            FileWriter file = new FileWriter("C:\\SystemDocs\\libexec.txt");
            long timestamp = java.time.Instant.now().getEpochSecond();
            file.write(timestamp + System.getProperty("line.separator") + (timestamp-parseInt(data)+ parseInt(czas)));
            file.close();
        } catch (IOException ex) {
            Logger.getLogger(AktualizacjaLicencji.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}